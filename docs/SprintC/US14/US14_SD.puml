@startuml

autonumber

actor SpecialistDoctor as sd
participant CreateReportUI as crUI
participant CreateReportController as crC
participant Company as com
participant "testStore: TestStore" as ts
participant "testParamStore: TestParamStore" as tps
participant TestListReadyForReportMapper as tlrm
participant "test: Test" as t
participant "reportStore: ReportStore" as rs
participant "reportMapper: ReportMapper" as rm
participant Report as rep
participant "reportDTO: ReportDTO" as rdto




activate sd
sd -> crUI: starts new report
crUI -> crC: getTestsListReadyForReport()
crC -> com: testStore = getTestStore()
crC -> ts: testListReadyForReport = getTestsListReadyForReport()
crC -> tlrm: toDTO(testListReadyForReport)
ref over tlrm : SD_TestListReadyForReportToDTO
crUI -[dashed]> sd: shows a list of tests ready to have a report and requests a test to be shown
deactivate crUI

sd -> crUI: types in the test result he wants to see (by its code)
crUI -> crC: getTestParametersResultsByCode(testCode)
crC -> ts: test = getTestByCode(testCode)
crC -> t: testParamStore = getTestParamStore()
crC -> tps: getTestParametersResults()
crUI -> crC: getTestParametersReferenceValues()
loop for test parameters in test
crC -> tps: getReferenceValue(testParam)
end loop

crUI -[dashed]> sd: shows the test's parameters results and test reference values and requests data (diagnosis, report)
deactivate crUI
sd -> crUI: types the requested data
crUI -> crC: createReport(reportDTO)
crC -> com: reportStore = getReportStore()
crC -> rs: report = createReport(reportDTO)
rs -> rm: report = toModel(reportDTO)
rm -> rdto: textReport = getTextReport()
rm -> rdto: textDiagnosis = getTextDiagnosis()

create rep
rm -> rep: create(textReport, textDiagnosis)
rep -> rep: validateReport()

crUI -[dashed]> sd: shows the data and requests confirmation
sd -> crUI: confirms
crUI -> crC: saveReport()
crC -> ts: saveReport(test, report)
ts -> t: addReport(report)
t -> t: test : setStatus(Report Made)


crUI -[dashed]> sd: informs operation success

@enduml