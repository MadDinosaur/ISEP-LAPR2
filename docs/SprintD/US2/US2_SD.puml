@startuml
autonumber

actor Client as cli
participant ":UpdateClientDataUI" as ui
participant ":UpdateClientDataController" as controller
participant ":Company" as company
participant "clientStore: ClientStore" as cstore
participant "clientMapper: ClientMapper" as cmapper
participant "clientDTO: ClientDTO" as dto
participant "client: Client" as client
participant "auth: AuthFacade" as auth


activate cli
cli -> ui : starts personal data update
activate ui
ui -> controller : getClient(email)
activate controller
controller -> company : getClientStore()
activate company
|||
deactivate company
controller -> cstore : client = getClientByEmail(email)
activate cstore
|||
deactivate cstore
controller -> cmapper : toDTO(client)
activate cmapper
cmapper -> dto : create(name, cardNumber, TIN, etc.)
activate dto
deactivate dto
deactivate cmapper
deactivate controller
ui --> cli : displays client data
deactivate ui
loop until client finishes editing
cli -> ui :  selects data to edit
activate ui
ui --> cli : requests new data
deactivate ui
cli -> ui :  types requested data
activate ui
end loop
activate ui
ui --> cli : shows the data and requests confirmation
deactivate ui
cli -> ui :  confirms the data
activate ui
ui -> dto: dto = create(name, cardNumber, TIN, etc.)
activate dto
deactivate dto
ui -> controller: updateClientData(dto)
activate controller
controller -> company: getAuthFacade()
activate company
|||
deactivate company
controller -> auth: changeUserEmail(oldEmail, newEmail)
activate auth
controller -> auth: changeUserPassword(email, pwd)
deactivate auth
controller -> cstore: updateClientData(client, dto)
deactivate controller
activate cstore
cstore -> cstore : validateData(client, dto)
cstore -> client : updateData(dto)
deactivate cstore
activate client
client -> client : validateData()
client -> client : setData()
ui --> cli : informs operation success
deactivate client
deactivate ui
@enduml