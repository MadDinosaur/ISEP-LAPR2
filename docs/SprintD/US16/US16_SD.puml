@startuml

autonumber

actor "Laboratory Coordinator" as lc
participant "OverviewTestsUI" as otUI
participant "OverviewTestsController" as otC
participant "Company" as company
participant "testStore: TestStore" as ts
participant "clientStore: ClientStore" as cs
participant "algorithm: BiggestContiguousSubSequenceAlgorithm"

activate lc
activate otUI

lc -> otUI: selects the overview of all tests menu
otUI -[dotted]> lc: requests the beginning and ending dates and the algorithm to be used
deactivate otUI
lc -> otUI: types in the requested data
activate otUI
otUI -> otC: dateInterval = getDatesBetweenDateInterval(begginingDate, endingDate)
otUI -> otC: getTotalNumberOfClients()
otC -> company: clientStore = getClientStore()
otC -> cs: getTotalNumberOfClients()
otUI -> otC: getTotalNumberOfValidatedTests()
otC -> company: testStore = getTestStore()
otC -> ts: getTotalNumberOfValidatedTests()
loop for each date in the date interval
otUI -> otC: getNumberOfTestsWaitingForResultsInDate(date)
otC -> ts: getNumberOfTestsWaitingForResultsInDate(date)
otUI -> otC: getNumberOfTestsWaitingForReportInDateInterval(dateInterval)
otC -> ts: getNumberOfTestsWaitingForReportInDateInterval(dateInterval)
otUI -> otC: getNumberOfTestsValidatedInDateInterval(dateInterval)
otC -> ts: getNumberOfTestsValidatedInDateInterval(dateInterval)
end loop
otUI -> otC: int[] sequence = getDifferenceOfNewAndValidatedTests(dateInterval)
otC -> ts: getDifferenceOfNewAndValidatedTestsForEachHalfAnHour(dateInterval)
otC -> ts: getNumberOfNewTestsForEachHalfAnHour(dateInterval)
otC -> ts: getNumberOfValidatedTestsForEachHalfAnHour(dateInterval)
otUI -> otC: getBiggestContiguousSubSequence(sequence, code)
otC -> company: algorithm = getBiggestContiguousSubSequenceAlgorithm(code)
otC -> "algorithm: BiggestContiguousSubSequenceAlgorithm": getBiggestContiguousSubSequence(sequence)
otUI -[dotted]> lc: shows the statistics and graphs

deactivate otUI
deactivate lc

@enduml