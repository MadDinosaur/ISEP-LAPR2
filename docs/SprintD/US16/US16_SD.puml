@startuml

autonumber

actor "Laboratory Coordinator" as lc
participant "OverviewTestsUI" as otUI
participant "OverviewTestsController" as otC
participant "Company" as company
participant "testStore: TestStore" as ts
participant "clientStore: ClientStore" as cs
participant "algorithm: BiggestContiguousSubSequenceAlgorithm"

activate lc
activate otUI

lc -> otUI: selects the overview of all tests menu
otUI -[dotted]> lc: requests the beginning and ending dates and the algorithm to be used
deactivate otUI
lc -> otUI: types in the requested data
activate otUI
otUI -> otC: dateInterval = getDatesBetweenDateInterval(begginingDate, endingDate)
otUI -> otC: getNumberOfClients()
otC -> company: clientStore = getClientStore()
otC -> cs: getNumberOfClients()
otUI -> otC: getNumberOfTestsWaitingForResults()
otC -> company: testStore = getTestStore()
otC -> ts: getNumberTestsWaitingForResults()
otUI -> otC: getNumberOfTestsWaitingForReport()
otC -> ts: getNumberOfTestsWaitingForReport()
otUI -> otC: getTestsValidatedInDateInterval(dateInterval)
otC -> ts: getTestsValidatedInDateInterval(dateInterval)
otUI -> otC: getDifferenceOfNewAndValidatedTests(dateInterval)
otC -> ts: int[] sequence = getDifferenceOfNewAndValidatedTestsForEachHalfAnHour(dateInterval)
otUI -> otC: getBiggestContiguousSubSequence(code)
otC -> company: algorithm = getBiggestContiguousSubSequenceAlgorithm(code)
otC -> "algorithm: BiggestContiguousSubSequenceAlgorithm": getBiggestContiguousSubSequence(sequence)
otUI -[dotted]> lc: shows the statistics and graphs

deactivate otUI
deactivate lc

@enduml