@startuml

autonumber

actor "Laboratory Coordinator" as lc

participant ImportCSVFileUI as icfu
participant ImportCSVFileController as icfc
participant RegisterTestController as rtc
participant RegisterClientController as rcc
participant "categories: List<Category>" as categories
participant "testParamList: TestParamList" as tpl
participant Company
participant "testTypeStore: TestTypeStore" as tts
participant "testStore: TestStore" as ts
participant "testType: TestType" as tt
participant "test: Test" as Test
participant "result: TestParameterResult"
participant "clientStore: ClientStore" as cs
participant "client: Client" as client
activate lc


lc -> icfu: clicks the import file menu
activate icfu


icfu -[dotted]> lc: requests the file
deactivate icfu


lc -> icfu: selects the CSV file
activate icfu

icfu -> icfc: file = setFile(file)
activate icfc
icfu -> icfc: validateFile(file)
deactivate icfc

loop while there are lines to read
icfu -> icfc: testTypeCode = readTestTypeCode()
activate icfc
icfc -> rtc: setTestTypeByCode(testTypeCode)
activate rtc
rtc -> Company: testTypeStore = getTestTypeStore()
activate Company
deactivate Company

rtc -> tts: testType = getTestTypeByCode(testTypeCode)
activate tts
deactivate tts

create categories
rtc -> categories: create()

loop for each category
icfu -> icfc: categoryName = readCategoryName()
icfc -> rtc: setCategoryByName(categoryName)
rtc -> tt: category = getCategoryFromTestTypeByName(categoryName)
activate tt
deactivate tt

rtc -> categories: add(category)
activate categories
deactivate categories
end loop

create tpl
rtc -> tpl: create()


loop for each parameter
icfu -> icfc: parameterCode = readParameterCodeAndResult()
icfu -> icfc: value = readParameterCodeAndResult()
icfc -> rtc: setTestParameterByParameterCodeAndResult(parameterCode, value)
rtc -> categories: parameter = getParameterByCode(parameterCode)
activate categories
deactivate categories
rtc -> tpl: addTestParameterResult(parameter, value)
activate tpl
deactivate tpl
end loop
icfu -> icfc: nhsID = readNhsId()
icfu -> icfc: cardNumber = readCardNumber()
icfu -> icfc: tin = readTin()
icfu -> icfc: birthday = readBirthday()
icfu -> icfc: phoneNumber = readPhoneNumber()
icfu -> icfc: name = readName()
icfu -> icfc: email = readEmail()
icfu -> icfc: address = readAddress()
icfu -> icfc: createClient()


icfc -> rcc: client = createClient(nhsID, cardNumber, tin, birthday, phoneNumber, name, email, address)
activate rcc
create client
rcc -> client: create(nhsID, cardNumber, tin, birthday, phoneNumber, name, email, address)
client -> client: validate()


icfu -> icfc: saveClient()
icfc -> rcc: saveClientFromCSV(client)
rcc -> Company: clientStore = getClientStore()
activate Company
deactivate Company
rcc -> cs: validate(client)
activate cs
rcc -> cs: saveClient(client)
deactivate cs
deactivate rcc

icfu -> icfc: labID = readLabId()
icfc -> rtc: setLabById(laboratoryID)
rtc -> Company: clinicalAnalysisLaboratory = getLabById(laboratoryID)
activate Company
deactivate Company

icfu -> icfc: testCode = readTestCode()
icfu -> icfc: nhsCode = readNhsCode()
icfu -> icfc: dateTimeRegister = readDateTimeRegister()
icfu -> icfc: dateTimeResults = readDateTimeResults()
icfu -> icfc: dateTimeReport = readDateTimeReport()
icfu -> icfc: dateTimeValidation = readDateTimeValidation()
icfu -> icfc: createTest()
icfc -> rtc: test = createTestFromCSV(testCode, nhsCode, dateTimeRegister, dateTimeResults, dateTimeReport, dateTimeValidation)

create Test
rtc -> Test: create(client, testCode, nhsCode, testType, categories, testParamList, dateTimeRegister, dateTimeResults, dateTimeReport, dateTimeValidation)



Test -> Test: validate()

icfu -> icfc: saveTest()
icfc -> rtc: saveTest(test)

rtc -> Company: testStore = getTestStore()
activate Company
deactivate Company


rtc -> ts: validate(test)
activate ts
rtc -> ts: add(test)
deactivate ts

deactivate icfc
deactivate rtc


end loop

icfu -[dotted]> lc: informs operation (in)success
deactivate icfu


@enduml