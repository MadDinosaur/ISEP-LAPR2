@startuml

autonumber

actor "Laboratory Coordinator" as lc
participant "OverviewTestsUI" as otUI
participant "OverviewTestsController" as otC
participant "Company" as company
participant "testStore: TestStore" as ts
participant "clientStore: ClientStore" as cs
participant "algorithm: BiggestContiguousSubSequenceAlgorithm"

activate lc
activate otUI

lc -> otUI: selects the overview of all tests menu
otUI -[dotted]> lc: requests the beginning and ending dates and the algorithm to be used
deactivate otUI
lc -> otUI: types in the requested data
activate otUI
otUI -> otC: dateInterval = getDatesBetweenDateInterval(beginningDate, endingDate)
activate otC
otUI -> otC: getTotalNumberOfClients()
otC -> company: clientStore = getClientStore()
activate company
deactivate company
otC -> cs: getTotalNumberOfClients()
activate cs
deactivate cs
deactivate otC
otUI -> otC: getTotalNumberOfValidatedTests()
activate otC
otC -> company: testStore = getTestStore()
activate company
deactivate company
otC -> ts: getTotalNumberOfValidatedTests()
activate ts
deactivate ts
deactivate otC
loop for each date in the date interval
otUI -> otC: getNumberOfTestsWaitingForResultsInDate(date)
activate otC
otC -> ts: getNumberOfTestsWaitingForResultsInDate(date)
activate ts
deactivate ts
deactivate otC
otUI -> otC: getNumberOfTestsWaitingForReportInDate(date)
activate otC
otC -> ts: getNumberOfTestsWaitingForReportInDate(date)
activate ts
deactivate ts
deactivate otC
otUI -> otC: getNumberOfTestsValidatedInDate(date)
activate otC
otC -> ts: getNumberOfTestsValidatedInDate(date)
activate ts
deactivate ts
deactivate otC
end loop
otUI -> otC: int[] sequence = getDifferenceOfNewAndValidatedTests(dateInterval)
activate otC
otC -> ts: getDifferenceOfNewAndValidatedTestsForEachHalfAnHour(dateInterval)
activate ts
otC -> ts: getNumberOfNewTestsForEachHalfAnHour(dateInterval)
otC -> ts: getNumberOfValidatedTestsForEachHalfAnHour(dateInterval)
deactivate ts
deactivate otC
otUI -> otC: getBiggestContiguousSubSequence(sequence, code)
activate otC
otC -> company: algorithm = getBiggestContiguousSubSequenceAlgorithm(code)
activate company
deactivate company
otC -> "algorithm: BiggestContiguousSubSequenceAlgorithm": getBiggestContiguousSubSequence(sequence)
activate "algorithm: BiggestContiguousSubSequenceAlgorithm"
deactivate "algorithm: BiggestContiguousSubSequenceAlgorithm"
deactivate otC
otUI -[dotted]> lc: shows the statistics and graphs

deactivate otUI
deactivate lc

@enduml